기계어
	1. 0과1로 이루어진 코드를 사용
	2. 사람과 기계어 사이 역할을 하는 프로그래밍 언어 필요

소스파일 : 프로그래밍 언어로 작성한 파일
컴파일 : 소스파일을 기계어 파일로 번역

프로그래밍언어 종류 : Java , C , C++ , C# , Python

Java : 임베디드 , 웹 , 안드로이드 소프트웨어 개발분야
C / C++ : 하드웨어 장치 제어 및 임베디드 SW 분야
C ++ / # : 데스크탑 앱 또는 ASP.NET 기반 웹 SW 분야
Python : 빅데이터 분석 및 머신러닝 SW분야

Java 특징 

1. 모든 운영체제에서 실행가능
2. 객체 지향 프로그래밍
3. 메모리 자동정리
4. 풍부한 라이브러리

JDK 역할 : 자바언어로 스프트웨어를 개발할 때 필요한 환경 및 도구를 제공하는 역할

JDK 종류 
Open JDK : 개발, 학습용 및 상업용 모두 무료로 사용
Oracle JDK : 상업용 목적으로 사용할 경우 년간 사용료 지불
	    장기 기술지원 및 업데이트 제공으로 안정적

학습용은 모두 무료이기에 안정적인 Oracle JDK 사용하는것이 좋다

JDK 기본 경로 C - > Program Files - > Java

**************
환경변수 편집

1. 윈도우창에서 환경변수 편집 검색

2. 환경변수 클릭

3. 시스템 변수 설정 변수명 : JAVA_HOME
		 변수 값은 JAVA기본경로로 설정한다.

4. Path클릭하고 편집 누른다

5. 새로만들기 클릭하고 "%JAVA_HOME%\bin"추가한다

************
이클립스 다운 
https://www.eclipse.org/downloads/download.php?file=/oomph/epp/2023-12/R/eclipse-inst-jre-win64.exe&mirror_id=1273

다운받고 관리자 권한으로 실행

2번째거 다운로드

installtion Folder 경로 : C:\Program Files


************

모듈 : 외부에서 재사용할 수 있는 패키지들을 묶은것
        이클립스의 프로젝트는 하나의 모듈을 개발하는것

모듈 기술자 : 모듈의 이름이 무엇인지
	     해당 모듈이 의존하는 모듈이 무엇인지

모듈화가 필요한 이유 : 패키지 보안 
		     작은 최적의 런타임 이미지를 만들기위해


****************************************
이클립스 들여쓰기 단축키 : ctrl + i
이클립스 생성자 , gettet , setter 단축키 : alt + s

cmd 디렉토리 경로 바꾸는법 : cd 입력후 원하는 경로 입력하면된다ssss

****************************************
깃허브 토큰 : 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
****************************************
강제 형변환
		int intValue = 44032;
		char charValue = (char) intValue;
		System.out.println(charValue);
		
int x=1;
int y =2;
double result = x/y
결과값은 0.0 이나온다
정상적인 값 출력을 원하면 
double result = (double) x/y; 이다

형변환 
		int value1 = Integer.parseInt("10");
		double value2 = Double.parseDouble("3.14");
		boolean value3 = Boolean.parseBoolean("true");
		String str1 =String.valueOf(10);
		
		
		
Scanner 
//		Scanner sc = new Scanner(System.in);
//		int date = sc.nextInt();
//		System.out.println("date : "+date);


랜덤숫자 뽑기

int random = (int) (Math.random()*6+1);

Math.random() 은 기본 0 ~ 1 까지이다
Math.random()*6+1 같이 작성하면 0부터7까지이다

int random = (int) (Math.random()*6+1);
는 정수형으로 바꾼다
double random1 = Math.random()*6+1;
원래 기본형식이다

배열선언과 길이 정하기
int score[] = new int[3];

다차원 배열 

		for(int i=0; i<mathscore.length; i++) {
			for(int j =0; j<mathscore[i].length; j++) {
				System.out.print(mathscore[i][j]);
			}
		}
		첫번째 for문은 다차원배열의 컬럼(세로)길이의 값을 나타내고
		두번째 for문은 다차원배열의 로우(가로)길이의 값을 나타낸다
		
		
		0 0 0 0
		0 0 0 0
		0 0 0 0
		
		로우 값은 = 3
		컬럼 값은 = 4
		
배열복사

		String oldStrArrayString[] = {"java","array","copy"};
		String newStrArray[] = new String[5];
		System.arraycopy(oldStrArrayString, 0, newStrArray, 0, oldStrArrayString.length);
		
//		olStrArrayString을 newStrArray에다 복사한다 얼마만큼? oldStrArrayString의length만큼 가져온다
		
//		oldStrArrayString.length 을 2로 바꾸면 java , array만 가져온다.
		
//		System.arraycopy(oldStrArrayString, 0, newStrArray, 1, oldStrArrayString.length);
//		에서 newStrArray뒤에 있는 숫자는 newStrArray에서 몇번째 인덱스에 넣을것인지 지정하는 인덱스번호이다.
		
//		System.arraycopy(oldStrArrayString, 0, newStrArray, 1, oldStrArrayString.length);
//		에서 oldStrArrayString 뒤에 있는 숫자는 oldStrArrayString의 배열에서 몇번 인덱스 부터 가져올것인지 의미한다.
//		단 0이 아니라 1로 입력하면 뒤에있는 oldStrArrayString.length 를 2로 바꿔야한다
		
//		교제 196pg


배열 다른 for문
		int scores[] = {95,71,84,93,87};
		
		int sum =0;
//		배열과 같은 타입인 int를 선언하고 score 변수에다 scores 배열을 차례대로 넣는다
		for(int score : scores) {
			sum = sum+score;
		}
		
	다른 for문으로 배열에 넣기
			for(Book books : book) {
			System.out.print("제목 >> ");
			String title = sc.nextLine();
			System.out.print("저자 >> ");
			String author = sc.nextLine();
			book[i] = new Book(title, author);
			i++;
		}

		
		
인스턴스 : 클래스로 부터 만들어진 객체
필드 : 객체의 고유데이터

메소드 오버로딩 : 같은메소드의 이름을 매개의 갯수나 타입을 다르게 하여 여러개 사용가능한것


////////////////////////////////////////////////////////////
1.	public Car(String model) {
		this(model,null,0);

	}

2.	public Car(String model, String color) {
		this(model,color,0);
	}


3.	public Car(String model,String color, int maxSpeed) {
		this.model = model;
		this.color = color;
		this.maxSpeed = maxSpeed;
	}
	매개변수가 가장 많은것에서 부터 시작된다
	3번 생성자는 매개변수가 String model,String color, int maxSpeed 있다.
	2번 생성자로 내려가서 보면 2번 생성자 매개는  String model, String color 이다
	this를 통해서 2번생성자에서 3번생성자에는 있는 매개를 변수의 타입에 따라 0,null로 해준다
	1번 생성자와 3번생성자를 비교해보면 1번은 매개가 1개 3번은 매개가 3개 이다
	1번과 3번을 비교해서 없는 값들을 null,0으로 해준다
	
	chap06 -> 클래스 -> 생성자_this활용해서_중복제거 파일 확인하면된다.
	
////////////////////////////////////////////////////////////

////////////////////
///////////////////////////////////
메소드
메소드 이름 앞에 void가 작성된 경우는 return문을 작성하지 않는다.
메소드 이름 앞에 void가 없는 경우는 return문을 작성한다.
///////////////////////////////////////////////////////
ex 메소드 
	double divide(int x , int y) {
		double result = (double)x / (double) y;
		return result;
	}
	return문이 있는경우 메소드 변수 타입에 맞는 변수를 지정하여 변수를 저장하고 사용한다.
	
double result = cal.divide(5, 6);
System.out.println(result);
	
static : 정적메소드 이다

메소드를 다른클래스에 만들었을때는 객체인스턴스 만들고 인스턴수 변수를 사용해서 메소드를 사용해야했다
하지만 static을 사용하면 객체 인스턴스 생성없이 클래스 이름을 가지고 메소드 사용가능하다.
Quiz - 메소드 - SumAvgEx 참고

final : 최종값이다 

변수를 final String name ="박주형";
으로 선언하면 값은 절대 바뀌지 않는다.

인터페이스 : 개발코드는 인터페이스를 통해서 객체와 서로 통신한다
인터페이스의 메소드 호출하면 객체의 메소드가 초훌된다
개발 코드를 수정하지 않으면서 객체 교환이 가능하다.

///////////////////////////////////////////////////////
객체의 인스턴스를 만들고 
인스턴스를 출력문을 통해서 출력하게 되면 hash코드가 출력된다
ex )
System.out.println(card1);
System.out.println(card1.toString());

두개의 결과는 같다

하지만 클래스의 상위는 Object 이다
Object에 있는 public String toString()
{
return;
}
을 오버라이딩해서 리턴타입을 통해서 원하는 결과값으로 출력할수있다.



///////////////////////////////////////////////////////

System.exit(0);
는 아예 프로그램을 종료하는것이다




/////////////////////////////
Set
저장순서 유지되지 않으며 객체 중복하여 저장할 수 없고 하나의 null만 저장할 수 있다.

Iterator :

		Set<String> set = new HashSet<>();
		
		set.add("java");
		set.add("JDBC");
		set.add("Selvlet/JSP");
		set.add("java");
		set.add("IBATIS");
		
		int size = set.size();
		System.out.println("set 사이즈 : " + size);
		
		Iterator<String> iterator = set.iterator();
		while (iterator.hasNext()) {
			System.out.println("\t" + iterator.next());

		}
		
Hashset타입으로 선언된 set 의 배열을
Iterator 배열에 값을 넣고 
while 문을 통해서 hasNext()를 통해서 다음값을 호출하고
sout문을 통해서 해당 인덱스 번호의 값을 출력한다.

////////////////////
Map
Map<String, Integer> map = new HashMap<String,Integer>();
key값은 중복 안되지만 value값은 중복가능하다.

